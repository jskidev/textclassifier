[{"C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\App.js":"1","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Classify.js":"3","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Home.js":"4","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Upload.js":"5","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\New.js":"6","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\My404.js":"7"},{"size":854,"mtime":1612137034649,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"10","hashOfConfig":"9"},{"size":3327,"mtime":1612408092284,"results":"11","hashOfConfig":"9"},{"size":3926,"mtime":1612410797344,"results":"12","hashOfConfig":"9"},{"size":1118,"mtime":1612408091481,"results":"13","hashOfConfig":"9"},{"size":1070,"mtime":1612409018845,"results":"14","hashOfConfig":"9"},{"size":142,"mtime":1612137014223,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"bfjopm",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\App.js",["33","34","35"],"C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\reportWebVitals.js",[],"C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Classify.js",["36"],"import '../App.css';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Classify() {\r\n\r\n  const [text, setText] = useState('');\r\n  const [threshold, setThreshold] = useState(0.8);\r\n  const [theResults, setTheResults] = useState([]);\r\n\r\n  const handleInputChange = (event) => {\r\n    setText(event.target.value)\r\n  }\r\n\r\n  const handleThresholdChange = (event) => {\r\n    setThreshold(event.target.value)\r\n  }\r\n\r\n  const handleSubmit = (event) => {\r\n      event.preventDefault();\r\n      axios({\r\n          method: 'post',\r\n          //url: 'http://localhost:8000/api/',    //DEVELOPMENT\r\n          url: window.location.origin+'/api/',  //PRODUCTION\r\n          data: {\r\n            text,\r\n            threshold\r\n          }\r\n        })\r\n      .then(function (response) {\r\n          let output = [];\r\n          output.push(text);\r\n          for( var i = 0 ; i < response['data'].length ; i++){\r\n            output.push(response['data'][i]['results'][0]['match'])\r\n          }\r\n          setTheResults([...theResults, output]);\r\n          console.log(theResults);\r\n          setText('');\r\n      })\r\n      .catch(function (error) {\r\n          console.log(error);\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <form onSubmit={handleSubmit}>\r\n        <label for=\"text\">Text</label>\r\n        <input name=\"text\" type=\"text\" placeholder=\"test\" required onChange={handleInputChange} value={text} id=\"text\" />\r\n        <label for=\"threshold\">Confidence threshold</label>\r\n        <input name=\"threshold\" type=\"number\" min=\"0\" max=\"1\" step=\"0.01\" id=\"threshold\" onChange={handleThresholdChange} value={threshold}/>\r\n        <button>submit</button>\r\n      </form>\r\n      <div>\r\n      {  \r\n                theResults.length > 0 ? \r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Text</th>\r\n                            <th>Identity Attack</th>\r\n                            <th>Insult</th>\r\n                            <th>Obscene</th>\r\n                            <th>Severe Toxicity</th>\r\n                            <th>Sexually Explicit</th>\r\n                            <th>Threat</th>\r\n                            <th>Toxicity</th>\r\n                        </tr>\r\n                    </thead>\r\n                        {\r\n                            theResults.map(\r\n                              (item, index) => ( \r\n                                  <tr>\r\n                                    {\r\n                                      item.map(\r\n                                        (that, count) => ( \r\n                                            <td>\r\n                                              {\r\n                                                (that === true || that === false || that == null) ? JSON.stringify(that) : that\r\n                                              }\r\n                                            </td>\r\n                                        )\r\n                                    )\r\n                                    }\r\n                                  </tr>\r\n                              )\r\n                          )\r\n                        }\r\n                </table>\r\n                : ''\r\n            }\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Classify;\r\n","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Home.js",["37"],"import '../App.css';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nimport * as THREE from \"three\";\r\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\r\n\r\nfunction Home() {\r\n\r\n    useEffect(() => {\r\n        const renderer = new THREE.WebGLRenderer();\r\n        const viewHeight = document.getElementById('App').clientHeight;\r\n        const getStartedHeight = document.getElementById('GetStarted').clientHeight;\r\n        const headerheight = document.getElementById('Header').clientHeight;\r\n\r\n        var canvasHeight;\r\n        var canvasWidth;\r\n\r\n        if(window.innerWidth < 800){\r\n            canvasHeight = viewHeight - getStartedHeight - headerheight;\r\n            canvasWidth = window.innerWidth - getStartedHeight;\r\n        } else if (window.innerWidth < 500) {\r\n            canvasHeight = viewHeight - getStartedHeight - headerheight;\r\n            canvasWidth = window.innerWidth;\r\n        } else if (window.innerWidth < 300){\r\n            canvasHeight = viewHeight - getStartedHeight - (headerheight * 2);\r\n            canvasWidth = window.innerWidth;\r\n        } else {\r\n            canvasHeight = viewHeight - getStartedHeight - headerheight;\r\n            canvasWidth = window.innerWidth - getStartedHeight - headerheight;\r\n        }\r\n\r\n        renderer.setSize( canvasWidth, canvasHeight );\r\n        console.log(window.innerWidth, window.innerHeight, getStartedHeight - headerheight)\r\n\r\n        document.getElementById('GetStarted').parentNode.insertBefore(renderer.domElement, document.getElementById('GetStarted'));\r\n        //document.getElementById('App').prepend( renderer.domElement );\r\n\r\n        const camera = new THREE.PerspectiveCamera( 35, window.innerWidth / window.innerHeight, 1, 500 );\r\n        camera.position.set( 0, 0, 100 );\r\n        camera.lookAt( 0, 0, 0 );\r\n\r\n        const controls = new OrbitControls( camera, renderer.domElement );\r\n        controls.enableZoom = false;\r\n        controls.enablePan = false;\r\n\r\n        const scene = new THREE.Scene();\r\n        scene.background = new THREE.Color( '#FFF' );\r\n\r\n        const lights = [];\r\n        lights[ 0 ] = new THREE.PointLight( 0xffffff, 1, 0 );\r\n        lights[ 1 ] = new THREE.PointLight( 0xffffff, 1, 0 );\r\n        lights[ 2 ] = new THREE.PointLight( 0xffffff, 1, 0 );\r\n\r\n        lights[ 0 ].position.set( 0, 200, 0 );\r\n        lights[ 1 ].position.set( 100, 200, 100 );\r\n        lights[ 2 ].position.set( - 100, - 200, - 100 );\r\n\r\n        scene.add( lights[ 0 ] );\r\n        scene.add( lights[ 1 ] );\r\n        scene.add( lights[ 2 ] );\r\n\r\n        const geometry = new THREE.IcosahedronGeometry( 15 , 1 );\r\n\r\n        const lineMaterial = new THREE.LineBasicMaterial( { color: 0xffffff, transparent: true, opacity: 1, linewidth: 2 } );\r\n        const meshMaterial = new THREE.MeshPhongMaterial( { color: '#e74c3c', emissive: '#c0392b', side: THREE.DoubleSide, flatShading: true, polygonOffset: true, polygonOffsetFactor: 1, polygonOffsetUnits: 1} );\r\n\r\n        const mesh = new THREE.Mesh( geometry, meshMaterial );\r\n        var line = new THREE.LineSegments( geometry, lineMaterial );\r\n\r\n        mesh.add( line );\r\n        scene.add( mesh );\r\n\r\n        renderer.render( scene, camera );\r\n        var animate = function () {\r\n            requestAnimationFrame( animate );\r\n            mesh.rotation.x += 0.005;\r\n            mesh.rotation.y += 0.005;\r\n            renderer.render( scene, camera );\r\n          };\r\n        animate();\r\n\r\n    }, []);\r\n\r\n    const handleClick = () => {\r\n        window.location = '/new'\r\n    }\r\n\r\n    return (\r\n    <div className=\"App\" id=\"App\">\r\n        <div className=\"Header\" id=\"Header\">\r\n            <h1 className=\"welcomeHeader\">Text Lab</h1>\r\n        </div>\r\n        <div className=\"GetStarted\" id=\"GetStarted\">\r\n            <button className=\"primaryButton\" onClick={handleClick}>GET STARTED</button>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\Upload.js",["38"],"C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\New.js",["39","40"],"import '../App.css';\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction New() {\r\n\r\n    const handleSingleClick = () => {\r\n        window.location = '/classify'\r\n    }\r\n    const handleMultipleClick = () => {\r\n        window.location = '/upload'\r\n    }\r\n    const handleHomeClick = () => {\r\n        window.location = '/'\r\n    }\r\n\r\n    return (\r\n        <div className=\"startContainer\">\r\n            <div className=\"startContent\">\r\n                <h2>Select classification method</h2>\r\n                <h4 className=\"pb20\">Do you want to manually classify sentences, or upload a csv to classify in bulk?</h4>\r\n                <button className=\"primaryButton buttonLeft\" onClick={handleSingleClick}>Manual</button>\r\n                <button className=\"primaryButton buttonRight\" onClick={handleMultipleClick}>Upload</button>\r\n                <p className=\"pb20\">\r\n                    <button className=\"linkButton\" onClick={handleHomeClick}>back to home</button>\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default New;\r\n","C:\\Users\\Jeremy\\Documents\\Development\\github\\textClassifier\\client\\src\\pages\\My404.js",[],{"ruleId":"41","severity":1,"message":"42","line":3,"column":17,"nodeType":"43","messageId":"44","endLine":3,"endColumn":25},{"ruleId":"41","severity":1,"message":"45","line":3,"column":27,"nodeType":"43","messageId":"44","endLine":3,"endColumn":36},{"ruleId":"41","severity":1,"message":"46","line":8,"column":3,"nodeType":"43","messageId":"44","endLine":8,"endColumn":7},{"ruleId":"41","severity":1,"message":"45","line":3,"column":27,"nodeType":"43","messageId":"44","endLine":3,"endColumn":36},{"ruleId":"41","severity":1,"message":"42","line":3,"column":17,"nodeType":"43","messageId":"44","endLine":3,"endColumn":25},{"ruleId":"41","severity":1,"message":"45","line":3,"column":27,"nodeType":"43","messageId":"44","endLine":3,"endColumn":36},{"ruleId":"41","severity":1,"message":"42","line":3,"column":17,"nodeType":"43","messageId":"44","endLine":3,"endColumn":25},{"ruleId":"41","severity":1,"message":"45","line":3,"column":27,"nodeType":"43","messageId":"44","endLine":3,"endColumn":36},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Link' is defined but never used."]